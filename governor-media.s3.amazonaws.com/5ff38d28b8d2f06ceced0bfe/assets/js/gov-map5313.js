var GovMap=function(t){var e={};function i(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,o){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},i.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s="./src/index.js")}({"./src/index.js":function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,i,o){return i&&t(e.prototype,i),o&&t(e,o),e}}();function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.GovMap=function(){function t(e,i){if(n(this,t),!google||!google.maps)throw"google maps must be loaded to use Governor Maps";if(!i)throw"no map configuration was supplied";if(this.elem=document.querySelector(e),this.options=i,!this.elem)throw"no element found using the provided selector: "+e;this.init()}return o(t,[{key:"init",value:function(){this.defineInfoBoxClass(),this.config=Object.assign({},this.defaults,this.options),this.config.customPopup&&(this.popupTemplateElement=document.getElementById(this.config.customPopup)),this.bounds=new google.maps.LatLngBounds,this._mapInstance=this.buildMap(this.elem,this.options),this._kmlLayers=this.setupKmls(this._mapInstance),this._markerInstances=this.setupMarkers(this._mapInstance),this.config.fitBounds&&this._mapInstance.fitBounds(this.bounds)}},{key:"showMarkersByType",value:function(t){var e=this;this._markerInstances.forEach(function(i){i.type===t&&i.setMap(e._mapInstance)})}},{key:"buildMap",value:function(t,e){return new google.maps.Map(t,{zoom:e.zoom,center:{lat:e.center.lat,lng:e.center.lng}})}},{key:"buildMarker",value:function(t,e){var i=this,o=void 0;if(t.type&&(t.icon=t.type.icon),o=this.placeMarker(t,e,t.type.scaledSize),t.showInfoBox)if(this.config.customPopup){var n=document.createElement("div"),s={image:t.image?"":"info-block-hide",name:t.name?"":"info-block-hide",address:t.address?"":"info-block-hide",phone:t.phone?"":"info-block-hide",directions:t.directions?"":"info-block-hide",url:t.url?"":"info-block-hide"};n.innerHTML='\n                    <div class="map-popup">\n                        <div class="sub-row">\n                            <div class="image-holder '+s.image+'">\n                                <img src="'+t.image.cdnCropUrl+'" alt="image description">\n                            </div>\n                            <div class="text-box">\n                                <strong class="'+s.name+'">'+t.name+'</strong>\n                                <address class="'+s.address+'">'+t.address+'</address>\n                                <div class="phone-row '+s.phone+'">\n                                    <a href="tel:'+t.phone+'" class="phone">'+t.phone+'</a>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="sub-row sub-row-button">\n                            <a target="_blank" href="'+t.directions+'" class="btn '+s.directions+' btn-primary">directions</a>\n                            <a target="_blank" href="'+t.url+'" class="btn '+s.url+' btn-primary">Learn More</a>\n                        </div>\n                    </div>\n                ',o.infoWindow=this.createInfoBox({content:n,disableAutoPan:!1,maxWidth:0,zIndex:null,boxStyle:{width:"180px"},closeBoxMargin:"10px 2px 2px 2px",closeBoxURL:"http://www.google.com/intl/en_us/mapfiles/close.gif",infoBoxClearance:new google.maps.Size(1,1),isHidden:!1,pane:"floatPane",enableEventPropagation:!1})}else o.infoWindow=this.createInfoWindow(t.content);return o.addListener("click",function(){i.closeInfoWindows(),t.showInfoBox&&o.infoWindow&&o.infoWindow.open(i._mapInstance,o)}),o}},{key:"closeInfoWindows",value:function(){this._markerInstances.forEach(function(t){t&&t.infoWindow&&t.infoWindow.close&&t.infoWindow.close()})}},{key:"createInfoWindow",value:function(t){return new google.maps.InfoWindow({content:t})}},{key:"createInfoBox",value:function(t){return new this.InfoBox(t)}},{key:"createPopup",value:function(t,e){return console.log("templateElement: ",e),new this.Popup(new google.maps.LatLng(t.lat,t.lng),e)}},{key:"definePopupClass",value:function(){this.Popup=function(t){function e(t,i){n(this,e);var o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));o.position=t,i.classList.add("popup-bubble-content");var s=document.createElement("div");return s.classList.add("popup-bubble-anchor"),s.appendChild(i),o.anchor=document.createElement("div"),o.anchor.classList.add("popup-tip-anchor"),o.anchor.appendChild(s),o.stopEventPropagation(),o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,google.maps.OverlayView),o(e,[{key:"onAdd",value:function(){this.getPanes().floatPane.appendChild(this.anchor)}},{key:"onRemove",value:function(){this.anchor.parentElement&&this.anchor.parentElement.removeChild(this.anchor)}},{key:"draw",value:function(){var t=this.getProjection().fromLatLngToDivPixel(this.position),e=Math.abs(t.x)<4e3&&Math.abs(t.y)<4e3?"block":"none";"block"===e&&(this.anchor.style.left=t.x+"px",this.anchor.style.top=t.y+"px"),this.anchor.style.display!==e&&(this.anchor.style.display=e)}},{key:"stopEventPropagation",value:function(){var t=this.anchor;t.style.cursor="auto",["click","dblclick","contextmenu","wheel","mousedown","touchstart","pointerdown"].forEach(function(e){t.addEventListener(e,function(t){t.stopPropagation()})})}}]),e}()}},{key:"defineInfoBoxClass",value:function(){
/*!
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *       http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
var t=function(t){t=t||{},google.maps.OverlayView.apply(this,arguments),this.content_=t.content||"",this.disableAutoPan_=t.disableAutoPan||!1,this.maxWidth_=t.maxWidth||0,this.pixelOffset_=t.pixelOffset||new google.maps.Size(0,0),this.position_=t.position||new google.maps.LatLng(0,0),this.zIndex_=t.zIndex||null,this.boxClass_=t.boxClass||"infoBox",this.boxStyle_=t.boxStyle||{},this.closeBoxMargin_=t.closeBoxMargin||"2px",this.closeBoxURL_=t.closeBoxURL||"//www.google.com/intl/en_us/mapfiles/close.gif",""===t.closeBoxURL&&(this.closeBoxURL_=""),this.closeBoxTitle_=t.closeBoxTitle||" Close ",this.infoBoxClearance_=t.infoBoxClearance||new google.maps.Size(1,1),void 0===t.visible&&(void 0===t.isHidden?t.visible=!0:t.visible=!t.isHidden),this.isHidden_=!t.visible,this.alignBottom_=t.alignBottom||!1,this.pane_=t.pane||"floatPane",this.enableEventPropagation_=t.enableEventPropagation||!1,this.div_=null,this.closeListener_=null,this.moveListener_=null,this.contextListener_=null,this.eventListeners_=null,this.fixedWidthSet_=null};(t.prototype=new google.maps.OverlayView).createInfoBoxDiv_=function(){var t,e,i,o=this,n=function(t){t.cancelBubble=!0,t.stopPropagation&&t.stopPropagation()};if(!this.div_){if(this.div_=document.createElement("div"),this.setBoxStyle_(),void 0===this.content_.nodeType?this.div_.innerHTML=this.getCloseBoxImg_()+this.content_:(this.div_.innerHTML=this.getCloseBoxImg_(),this.div_.appendChild(this.content_)),this.getPanes()[this.pane_].appendChild(this.div_),this.addClickHandler_(),this.div_.style.width?this.fixedWidthSet_=!0:0!==this.maxWidth_&&this.div_.offsetWidth>this.maxWidth_?(this.div_.style.width=this.maxWidth_,this.div_.style.overflow="auto",this.fixedWidthSet_=!0):(i=this.getBoxWidths_(),this.div_.style.width=this.div_.offsetWidth-i.left-i.right+"px",this.fixedWidthSet_=!1),this.panBox_(this.disableAutoPan_),!this.enableEventPropagation_){for(this.eventListeners_=[],e=["mousedown","mouseover","mouseout","mouseup","click","dblclick","touchstart","touchend","touchmove"],t=0;t<e.length;t++)this.eventListeners_.push(google.maps.event.addDomListener(this.div_,e[t],n));this.eventListeners_.push(google.maps.event.addDomListener(this.div_,"mouseover",function(t){this.style.cursor="default"}))}this.contextListener_=google.maps.event.addDomListener(this.div_,"contextmenu",function(t){t.returnValue=!1,t.preventDefault&&t.preventDefault(),o.enableEventPropagation_||n(t)}),google.maps.event.trigger(this,"domready")}},t.prototype.getCloseBoxImg_=function(){var t="";return""!==this.closeBoxURL_&&(t="<img",t+=" src='"+this.closeBoxURL_+"'",t+=" align=right",t+=" title='"+this.closeBoxTitle_+"'",t+=" style='",t+=" position: relative;",t+=" cursor: pointer;",t+=" margin: "+this.closeBoxMargin_+";",t+="'>"),t},t.prototype.addClickHandler_=function(){var t;""!==this.closeBoxURL_?(t=this.div_.firstChild,this.closeListener_=google.maps.event.addDomListener(t,"click",this.getCloseClickHandler_())):this.closeListener_=null},t.prototype.getCloseClickHandler_=function(){var t=this;return function(e){e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation(),google.maps.event.trigger(t,"closeclick"),t.close()}},t.prototype.panBox_=function(t){var e,i=0,o=0;if(!t&&(e=this.getMap())instanceof google.maps.Map){e.getBounds().contains(this.position_)||e.setCenter(this.position_);var n=this.pixelOffset_.width,s=this.pixelOffset_.height,r=this.div_.offsetWidth,a=this.div_.offsetHeight,l=this.infoBoxClearance_.width,h=this.infoBoxClearance_.height;if(2==e.panToBounds.length){var d={left:0,right:0,top:0,bottom:0};d.left=-n+l,d.right=n+r+l,this.alignBottom_?(d.top=-s+h+a,d.bottom=s+h):(d.top=-s+h,d.bottom=s+a+h),e.panToBounds(new google.maps.LatLngBounds(this.position_),d)}else{var c=e.getDiv(),p=c.offsetWidth,u=c.offsetHeight,f=this.getProjection().fromLatLngToContainerPixel(this.position_);if(f.x<-n+l?i=f.x+n-l:f.x+r+n+l>p&&(i=f.x+r+n+l-p),this.alignBottom_?f.y<-s+h+a?o=f.y+s-h-a:f.y+s+h>u&&(o=f.y+s+h-u):f.y<-s+h?o=f.y+s-h:f.y+a+s+h>u&&(o=f.y+a+s+h-u),0!==i||0!==o){e.getCenter();e.panBy(i,o)}}}},t.prototype.setBoxStyle_=function(){var t,e;if(this.div_){for(t in this.div_.className=this.boxClass_,this.div_.style.cssText="",e=this.boxStyle_)e.hasOwnProperty(t)&&(this.div_.style[t]=e[t]);(void 0===this.div_.style.WebkitTransform||-1===this.div_.style.WebkitTransform.indexOf("translateZ")&&-1===this.div_.style.WebkitTransform.indexOf("matrix"))&&(this.div_.style.WebkitTransform="translateZ(0)"),void 0!==this.div_.style.opacity&&""!==this.div_.style.opacity&&(this.div_.style.MsFilter='"progid:DXImageTransform.Microsoft.Alpha(Opacity='+100*this.div_.style.opacity+')"',this.div_.style.filter="alpha(opacity="+100*this.div_.style.opacity+")"),this.div_.style.position="absolute",this.div_.style.visibility="hidden",null!==this.zIndex_&&(this.div_.style.zIndex=this.zIndex_)}},t.prototype.getBoxWidths_=function(){var t,e={top:0,bottom:0,left:0,right:0},i=this.div_;return document.defaultView&&document.defaultView.getComputedStyle?(t=i.ownerDocument.defaultView.getComputedStyle(i,""))&&(e.top=parseInt(t.borderTopWidth,10)||0,e.bottom=parseInt(t.borderBottomWidth,10)||0,e.left=parseInt(t.borderLeftWidth,10)||0,e.right=parseInt(t.borderRightWidth,10)||0):document.documentElement.currentStyle&&i.currentStyle&&(e.top=parseInt(i.currentStyle.borderTopWidth,10)||0,e.bottom=parseInt(i.currentStyle.borderBottomWidth,10)||0,e.left=parseInt(i.currentStyle.borderLeftWidth,10)||0,e.right=parseInt(i.currentStyle.borderRightWidth,10)||0),e},t.prototype.onRemove=function(){this.div_&&(this.div_.parentNode.removeChild(this.div_),this.div_=null)},t.prototype.draw=function(){this.createInfoBoxDiv_();var t=this.getProjection().fromLatLngToDivPixel(this.position_);this.div_.style.left=t.x+this.pixelOffset_.width+"px",this.alignBottom_?this.div_.style.bottom=-(t.y+this.pixelOffset_.height)+"px":this.div_.style.top=t.y+this.pixelOffset_.height+"px",this.isHidden_?this.div_.style.visibility="hidden":this.div_.style.visibility="visible"},t.prototype.setOptions=function(t){void 0!==t.boxClass&&(this.boxClass_=t.boxClass,this.setBoxStyle_()),void 0!==t.boxStyle&&(this.boxStyle_=t.boxStyle,this.setBoxStyle_()),void 0!==t.content&&this.setContent(t.content),void 0!==t.disableAutoPan&&(this.disableAutoPan_=t.disableAutoPan),void 0!==t.maxWidth&&(this.maxWidth_=t.maxWidth),void 0!==t.pixelOffset&&(this.pixelOffset_=t.pixelOffset),void 0!==t.alignBottom&&(this.alignBottom_=t.alignBottom),void 0!==t.position&&this.setPosition(t.position),void 0!==t.zIndex&&this.setZIndex(t.zIndex),void 0!==t.closeBoxMargin&&(this.closeBoxMargin_=t.closeBoxMargin),void 0!==t.closeBoxURL&&(this.closeBoxURL_=t.closeBoxURL),void 0!==t.closeBoxTitle&&(this.closeBoxTitle_=t.closeBoxTitle),void 0!==t.infoBoxClearance&&(this.infoBoxClearance_=t.infoBoxClearance),void 0!==t.isHidden&&(this.isHidden_=t.isHidden),void 0!==t.visible&&(this.isHidden_=!t.visible),void 0!==t.enableEventPropagation&&(this.enableEventPropagation_=t.enableEventPropagation),this.div_&&this.draw()},t.prototype.setContent=function(t){this.content_=t,this.div_&&(this.closeListener_&&(google.maps.event.removeListener(this.closeListener_),this.closeListener_=null),this.fixedWidthSet_||(this.div_.style.width=""),void 0===t.nodeType?this.div_.innerHTML=this.getCloseBoxImg_()+t:(this.div_.innerHTML=this.getCloseBoxImg_(),this.div_.appendChild(t)),this.fixedWidthSet_||(this.div_.style.width=this.div_.offsetWidth+"px",void 0===t.nodeType?this.div_.innerHTML=this.getCloseBoxImg_()+t:(this.div_.innerHTML=this.getCloseBoxImg_(),this.div_.appendChild(t))),this.addClickHandler_()),google.maps.event.trigger(this,"content_changed")},t.prototype.setPosition=function(t){this.position_=t,this.div_&&this.draw(),google.maps.event.trigger(this,"position_changed")},t.prototype.setZIndex=function(t){this.zIndex_=t,this.div_&&(this.div_.style.zIndex=t),google.maps.event.trigger(this,"zindex_changed")},t.prototype.setVisible=function(t){this.isHidden_=!t,this.div_&&(this.div_.style.visibility=this.isHidden_?"hidden":"visible")},t.prototype.getContent=function(){return this.content_},t.prototype.getPosition=function(){return this.position_},t.prototype.getZIndex=function(){return this.zIndex_},t.prototype.getVisible=function(){return void 0!==this.getMap()&&null!==this.getMap()&&!this.isHidden_},t.prototype.getWidth=function(){var t=null;return this.div_&&(t=this.div_.offsetWidth),t},t.prototype.getHeight=function(){var t=null;return this.div_&&(t=this.div_.offsetHeight),t},t.prototype.show=function(){this.isHidden_=!1,this.div_&&(this.div_.style.visibility="visible")},t.prototype.hide=function(){this.isHidden_=!0,this.div_&&(this.div_.style.visibility="hidden")},t.prototype.open=function(t,e){var i=this;e&&(this.setPosition(e.getPosition()),this.moveListener_=google.maps.event.addListener(e,"position_changed",function(){i.setPosition(this.getPosition())})),this.setMap(t),this.div_&&this.panBox_(this.disableAutoPan_)},t.prototype.close=function(){var t;if(this.closeListener_&&(google.maps.event.removeListener(this.closeListener_),this.closeListener_=null),this.eventListeners_){for(t=0;t<this.eventListeners_.length;t++)google.maps.event.removeListener(this.eventListeners_[t]);this.eventListeners_=null}this.moveListener_&&(google.maps.event.removeListener(this.moveListener_),this.moveListener_=null),this.contextListener_&&(google.maps.event.removeListener(this.contextListener_),this.contextListener_=null),this.setMap(null)},this.InfoBox=t}},{key:"focusMarker",value:function(t){var e=this._markerInstances.find(function(e){return e.id===t});e&&this._mapInstance.panTo(e.position)}},{key:"getIconConfig",value:function(t){return{title:t.name,url:t.icon,scaledSize:new google.maps.Size(35,35)}}},{key:"getKMLs",value:function(){return this.options._kmlLayers}},{key:"getMarkers",value:function(){return this.options.markers}},{key:"getMarkerInstances",value:function(){return this._markerInstances}},{key:"getMarkerTypes",value:function(){var t={};return this.options.markers.forEach(function(e){t[e.type._id]||(t[e.type._id]=e.type)}),t}},{key:"hideMarkersByType",value:function(t){this._markerInstances.forEach(function(e){e.type===t&&e.setMap(null)})}},{key:"placeMarker",value:function(t,e){var i={title:t.name,position:t.location,type:t.type._id,id:t._id,map:e};if(t.icon){var o=this.getIconConfig(t);i.icon=o,t.type&&t.type.scaledSize&&(i.scaledSize=t.type.scaledSize)}return new google.maps.Marker(i)}},{key:"setupKmls",value:function(t){var e=[],i=void 0;return this.config.kmls.forEach(function(o){o&&(i=new google.maps.KmlLayer({url:o.kmlFile,map:t,preserveViewport:!0,name:o.name}),e.push(i))}),e}},{key:"setupMarkers",value:function(t){var e=this,i=[],o=void 0;return this.config.markers.forEach(function(n){n.show&&(o=e.buildMarker(n,t),e.bounds.extend(o.getPosition()),i.push(o))}),i}},{key:"setVisibleMarkersByType",value:function(t){var e=this,i=new google.maps.LatLngBounds;t.length?this._markerInstances.forEach(function(o){t.includes(o.type)?(o.setMap(e._mapInstance),i.extend(o.getPosition())):o.setMap(null),e._mapInstance.fitBounds(i)}):this.showAllMarkers()}},{key:"showAllMarkers",value:function(){var t=this;this._markerInstances.forEach(function(e){e.setMap(t._mapInstance)})}}]),t}()}}).GovMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,