window.GovMapbox=function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./src/mapbox.js")}({"./src/mapbox.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();n.GovMapbox=function(){function e(n,t){if(function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),!mapboxgl)throw"mapbox must be loaded to use Governor Maps";if(!t)throw"no map configuration was supplied";if(this.elem=document.querySelector(n),this.options=t,!this.elem)throw"no element found using the provided selector: "+n;this.init()}return r(e,[{key:"init",value:function(){this.config=Object.assign({},this.defaults,this.options),this.config.customPopup&&(this.popupTemplateElement=document.getElementById(this.config.customPopup)),this.bounds=new mapboxgl.LngLatBounds,this._mapInstance=this.buildMap(this.elem,this.options),this._markerInstances=this.setupMarkers(this._mapInstance),this._mapInstance.fitBounds(this.bounds.toArray(),{padding:{top:25,bottom:25,left:25,right:25}})}},{key:"showMarkersByType",value:function(e){var n=this;this._markerInstances.forEach(function(t){t.type===e&&t.addTo(n._mapInstance)})}},{key:"buildMap",value:function(e,n){return new mapboxgl.Map({container:e,style:"mapbox://styles/greatparks/cjnor658x1iqp2rmikvuok3ez",center:[n.center.lng,n.center.lat]})}},{key:"buildMarker",value:function(e,n){var t=void 0;if(e.type&&(e.icon=e.type.icon),(t=this.placeMarker(e,n,e.type.scaledSize)).title=e.name,t.type=e.type._id,t.id=e._id,e.showInfoBox){var r=e.content,o=new mapboxgl.Popup({className:"mapbox-pop"});if(this.config.customPopup){var a={image:e.image?"":"info-block-hide",name:e.name?"":"info-block-hide",address:e.address?"":"info-block-hide",phone:e.phone?"":"info-block-hide",directions:e.directions?"":"info-block-hide",url:e.url?"":"info-block-hide"};r='\n                        <div class="sub-row">\n                            <div class="image-holder '+a.image+'">\n                                <img src="'+e.image.cdnCropUrl+'" alt="image description">\n                            </div>\n                            <div class="text-box">\n                                <strong class="'+a.name+'">'+e.name+'</strong>\n                                <address class="'+a.address+'">'+e.address+'</address>\n                                <div class="phone-row '+a.phone+'">\n                                    <a href="tel:'+e.phone+'" class="phone">'+e.phone+'</a>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="sub-row sub-row-button">\n                            <a target="_blank" href="'+e.directions+'" class="btn '+a.directions+' btn-primary">directions</a>\n                            <a target="_blank" href="'+e.url+'" class="btn '+a.url+' btn-primary">Learn More</a>\n                        </div>\n                '}o.setHTML(r),t.setPopup(o)}return t}},{key:"focusMarker",value:function(e){var n=this._markerInstances.find(function(n){return n.id===e});n&&this._mapInstance.panTo(n.position)}},{key:"getIconConfig",value:function(e){return{title:e.name,url:e.icon,scaledSize:new google.maps.Size(35,35)}}},{key:"getKMLs",value:function(){return this.options.kmls}},{key:"getMarkers",value:function(){return this.options.markers}},{key:"getMarkerInstances",value:function(){return this._markerInstances}},{key:"getMarkerTypes",value:function(){var e={};return this.options.markers.forEach(function(n){e[n.type._id]||(e[n.type._id]=n.type)}),e}},{key:"hideMarkersByType",value:function(e){this._markerInstances.forEach(function(n){n.type===e&&n.remove()})}},{key:"placeMarker",value:function(e,n){var t={title:e.name,type:e.type._id,id:e._id};if(e.icon){var r=document.createElement("div");r.className="marker",r.style.backgroundImage="url("+e.icon+")",r.style.width="35px",r.style.height="35px",r.style.backgroundSize="35px 35px",t.element=r}var o=new mapboxgl.Marker(t);return o.setLngLat([e.location.lng,e.location.lat]).addTo(n),o}},{key:"setupKmls",value:function(e){var n=[],t=void 0;return this.config.kmls.forEach(function(r){r&&(t=new google.maps.KmlLayer({url:r.kmlFile,map:e,preserveViewport:!0,name:r.name}),n.push(t))}),n}},{key:"setupMarkers",value:function(e){var n=this,t=[],r=void 0;return this.config.markers.forEach(function(o){o.show&&(r=n.buildMarker(o,e),n.bounds.extend(r.getLngLat()),t.push(r))}),t}},{key:"setVisibleMarkersByType",value:function(e){var n=this,t=new mapboxgl.LngLatBounds;e.length?this._markerInstances.forEach(function(r){e.includes(r.type)?(r.addTo(n._mapInstance),t.extend(r.getLngLat().toArray())):r.remove(),n._mapInstance.fitBounds(t.toArray())}):this.showAllMarkers()}},{key:"showAllMarkers",value:function(){var e=this;this._markerInstances.forEach(function(n){n.setMap(e._mapInstance)})}}]),e}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,